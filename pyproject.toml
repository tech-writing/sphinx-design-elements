[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit",
]

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

[project]
name = "sphinx-design-elements"
description = "A collection of composite web elements based on components from sphinx-design."
readme = "README.md"
keywords = [
  "authoring",
  "badge",
  "css",
  "design",
  "documentation",
  "dropdown",
  "extension",
  "flexbox",
  "grid",
  "layout",
  "markdown",
  "material design",
  "myst",
  "responsive html",
  "restructuredtext",
  "shield",
  "sphinx",
  "sphinx design",
  "table",
  "tag",
  "web components",
]
license = { file = "LICENSE" }
authors = [
  { name = "Andreas Motl", email = "andreas.motl@panodata.org" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Plugins",
  "Environment :: Web Environment",
  "Framework :: Sphinx",
  "Framework :: Sphinx :: Extension",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Documentation",
  "Topic :: Documentation :: Sphinx",
  "Topic :: Education",
  "Topic :: File Formats",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Bug Tracking",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Documentation",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Software Development :: Widget Sets",
  "Topic :: Text Processing",
  "Topic :: Text Processing :: Markup",
  "Topic :: Text Processing :: Markup :: HTML",
  "Topic :: Text Processing :: Markup :: Markdown",
  "Topic :: Text Processing :: Markup :: reStructuredText",
]
dynamic = [
  "version",
]
dependencies = [
  "sphinx<8.2",
  "sphinx-design==0.6.1",
]
[project.optional-dependencies]
develop = [
  "black<25",
  "mypy<1.15",
  "poethepoet<0.30",
  "pyproject-fmt<2.6",
  "ruff<0.9",
  "types-docutils==0.20.0.3",
  "validate-pyproject<0.24",
]
docs = [
  "furo",
  "myst-parser[linkify]>=0.18,<5",
  "sphinx-autobuild",
  "sphinx-copybutton",
]
release = [
  "build<2",
  "keyring",
  "twine<7",
]
test = [
  "pytest<9",
  "pytest-cov<7",
  "pytest-regressions<3",
  "sphinx_pytest<0.3",
]
[project.urls]
changelog = "https://github.com/panodata/sphinx-design-elements/blob/main/CHANGES.md"
documentation = "https://sphinx-design-elements.readthedocs.io/"
homepage = "https://sphinx-design-elements.readthedocs.io/"
repository = "https://github.com/panodata/sphinx-design-elements"

[tool.black]
line-length = 120

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]
source = ["sphinx_design_elements"]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
packages = ["sphinx_design_elements"]
exclude = [
]
check_untyped_defs = true
implicit_optional = true
install_types = true
no_implicit_optional = true
non_interactive = true
show_error_codes = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true

[[tool.mypy.overrides]]
module = ["docutils.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = "-rA --verbosity=3 --cov --cov-report=term-missing --cov-report=xml"
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
testpaths = [
  "sphinx_design_elements",
  "tests",
]
xfail_strict = true
markers = [
]

[tool.ruff]
line-length = 120

lint.select = [
  # Pycodestyle
  "E",
  "W",
  # Pyflakes
  "F",
  # isort
  "I",
  # Bandit
  "S",
  # flake8-quotes
  "Q",
  # eradicate
  "ERA",
  # flake8-2020
  "YTT",
  # print
  "T20",
  # return
  "RET",
  # pyupgrade
  # "UP",
  # flake8-commas
  # "COM",
  # future-annotations
  # "FA",
  # flake8-type-checking
  "TCH",
  # flake8-unused-arguments
  # "ARG",
  # flake8-use-pathlib
  # "PTH"
]

lint.extend-ignore = [
  # zip() without an explicit strict= parameter
  "B905",
  # df is a bad variable name. Be kinder to your future self.
  "PD901",
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
]


[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]  # Allow use of `assert`, and `print`.
"docs/conf.py" = ["ERA001"]  # Allow commented-out code (ERA001).

[tool.setuptools.packages.find]
namespaces = false


# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

docs-autobuild = [
  { cmd = "sphinx-autobuild --open-browser --watch sphinx_design_elements docs docs/_build" }
]
docs-html = [
  { cmd = "sphinx-build -W --keep-going docs docs/_build" }
]

format = [
  { cmd = "black ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff check ." },
  { cmd = "black --check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload --skip-existing dist/*.tar.gz dist/*.whl" },
]

test = { cmd = "pytest" }
